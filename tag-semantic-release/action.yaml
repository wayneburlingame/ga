name: 'Create semantic release'
description: 'Create semantic release'
inputs:
  version-type:
    required: true
    default: 'patch'
  github-token:
    required: true
  debug:
    default: false
runs:
  using: "composite"
  steps:
    - run: |

        echo "sen0.0.2"
        export GITHUB_TOKEN=${{ inputs.github-token }}
        if [ ${{ inputs.debug }} = true ]; then
          set -x
        fi

        if [[ ! -x "$(which hub)" ]]; then
          echo "Missing hub cli, install it here:"
          echo "https://github.com/github/hub"
          exit 1
        fi

        if [[ ! -x "$(which git)" ]]; then
          echo "Missing git command"
          exit 1
        fi

        # Last 5 recent tags
        tags=$(git for-each-ref refs/tags --sort=-taggerdate --format='%(refname)' --count=5)

        # Find a semantic version
        current_tag="v0.0.0"
        for tag in tags; do
          if [[ $tag =~ "v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}" ]]; then
            current_tag=$tag
            echo "Found the latest semantic tag $tag"
            break
          fi
        done

        # Turn string to array
        tag_array=($(echo "$current_tag" | tr '.' '\n'))

        # Must have 3 elements in the array
        if [[ $( echo "${#tag_array[@]}") != 3 ]]; then
          echo "Invalud tag $current_tag"
          exit 1
        fi

        type=${{ inputs.version-type }}
        major=$(echo "${tag_array[0]}" | tr -d "v" )
        minor=${tag_array[1]}
        patch=${tag_array[2]}


        case $type in
          "major")
            major=$(( $major + 1 ))
            ;;
          "minor")
            minor=$(( $minor + 1 ))
            ;;
          "patch")
            patch=$(( $patch + 1 ))
            ;;
          *)
            echo "Invalid version type: $type"
            exit 1
            ;;
        esac

        new_tag="v$major.$minor.$patch"
        echo "new tag: $new_tag"

        git config --global user.name 'zendesk-ops-ci'
        git config --global user.email 'zendesk-ops-ci@zendesk.com'
        git config --global hub.protocol https
        hub release create -m "$new_tag" $new_tag

      shell: bash
